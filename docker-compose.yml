# The docker-compose DSL syntax format we're using

version: "3"

services:

  app:

    container_name: gcma-api 
# How the container will appear when listing containers from the CLI
    build: ./

#    command: npm run start
 #   volumes:
  #    - .:/usr/src/app/
   #   - /usr/src/app/node_modules

    #image: node:carbon 
# The <container-name>:<tag-version> of the container, in this case the tag version aligns with the version of node

    #user: node 
# The user to run as in the container

    #working_dir: "/usr/src/app" 
# Where to container will assume it should run commands and where you will start out if you go inside the container

    #networks:

    #- app 
# Networking can get complex, but for all intents and purposes 
# just know that containers on the same network can speak to each other

    ports:

    - "8080:8000" 
# <host-port>:<container-port> to listen to, so anything running on port 8000 of the 
# container will map to port 8080 on our localhost
   
    env_file: .env

    enviornment:
      DATABASE_URL: postgres://db_access:freedom@postres:5433/gc-mngmt
      NODE_ENV: development
      PORT: 8000
      #USERNAME: db_access
      #PASSWORD: freedom
      #HOSTNAME: 192.168.2.211
      #DB: gc-mngmt
    volumes:

    - ./:/usr/src/app
    - /usr/src/app/node_modules
 
# <host-directory>:<container-directory> this says map the current 
# directory from your system to the /app directory in the docker container

    command: npm run start 
# The command docker will execute when starting the container, 
# this command is not allowed to exit, if it does your container will stop


# networks:

  # app:
